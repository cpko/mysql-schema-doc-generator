// Code generated by go-bindata.
// sources:
// tables_desc_template.gtpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tables_desc_templateGtpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\xd0\xab\xad\xe5\x52\x56\x56\xa8\xae\xd6\x0b\x49\x4c\xca\x49\xf5\x4b\xcc\x4d\xad\xad\x55\x78\xb1\x70\x05\x57\x75\x75\x79\x66\x49\x86\x82\x9e\x73\x7e\x4e\x69\x6e\x5e\x71\x6d\x2d\x57\x8d\x82\xc2\xd3\xb5\xd3\x9f\xad\xdb\xaa\xa0\x50\xa3\xa0\xa0\xf0\x62\xfd\x96\x67\x33\xfa\x14\x20\x9c\xe7\x1b\x77\x3f\x9d\xd7\x0d\xe1\xbc\x9c\xba\xff\xe9\xae\x65\x60\xe6\xb3\x19\xeb\x9f\x4e\x58\xf6\xb4\x7f\xfd\xf3\x95\xbb\x90\x04\x9e\x6f\x59\xf4\x74\xcf\x54\x88\xce\xa7\x4b\xda\x9f\x6d\x5e\x01\xd2\xc9\x55\x63\xa5\x0b\x02\x56\x50\x1a\x99\x85\x60\x62\x13\x43\x63\x72\x21\xf9\xae\x06\xe4\x37\xa8\xb7\xc0\x6c\xe7\xfc\xdc\xdc\xd4\xbc\x12\x18\xd7\x25\xb1\x24\x31\xa4\xb2\x00\x26\x9d\x99\xa6\xa0\xe7\x9c\x91\x58\x94\x98\x5c\x92\x5a\xe4\x9b\x58\x91\x99\x5b\x9a\xeb\x93\x9a\x97\x5e\x92\xa1\x17\x96\x98\x93\x99\x52\x5b\x0b\x36\x03\xbb\x0a\xcf\xbc\x12\x33\x13\xb0\x8a\xd4\x9c\x62\x90\x89\xba\x20\x66\x5e\x0a\xcc\x2e\xcf\x62\xbf\xd2\x9c\x1c\x50\x38\x23\x44\x3c\xf3\x52\x52\x2b\x52\x21\x4a\x14\x40\x2e\x07\xab\x47\xa7\x01\x01\x00\x00\xff\xff\x54\x6a\x01\xec\xaf\x01\x00\x00")

func tables_desc_templateGtplBytes() ([]byte, error) {
	return bindataRead(
		_tables_desc_templateGtpl,
		"tables_desc_template.gtpl",
	)
}

func tables_desc_templateGtpl() (*asset, error) {
	bytes, err := tables_desc_templateGtplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tables_desc_template.gtpl", size: 431, mode: os.FileMode(420), modTime: time.Unix(1478418802, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tables_desc_template.gtpl": tables_desc_templateGtpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tables_desc_template.gtpl": &bintree{tables_desc_templateGtpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

